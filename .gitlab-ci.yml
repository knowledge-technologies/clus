variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"
  CLUS_PUBLIC_USERNAME: $CLUS_PUBLIC_USERNAME
  CLUS_PUBLIC_TOKEN: $CLUS_PUBLIC_TOKEN
  CLUS_PUBLIC_REPOSITORY: $CLUS_PUBLIC_REPOSITORY


# This template uses jdk8 for verifying and deploying images
image: maven:3.3.9-jdk-8

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths:
    - .m2/repository

# For merge requests do not `deploy` but only run `verify`.
# See https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
.verify: &verify
  stage: test
  script:
    - 'mvn $MAVEN_CLI_OPTS verify'
  except:
    variables:
      - $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Verify merge requests using JDK8
verify:jdk8:
  <<: *verify

build:
  stage: build
  script:
    - cd ClusProject/
    - mvn clean package -Dmaven.test.skip
  artifacts:
    paths:
      - ClusProject/target/*.jar
  rules:
    - if: $CI_COMMIT_BRANCH      

#deploy:jdk8:
#  stage: deploy
#  script:
#    - git remote set-url origin http://${CLUS_PUBLIC_USERNAME}:${CLUS_PUBLIC_TOKEN}@${CLUS_PUBLIC_REPOSITORY}
#    - git config --global user.email '${GITLAB_USER_EMAIL}'
#    - git config --global user.name '${GITLAB_USER_ID}'
#    #- git pull origin master
#    - git add -A && git commit -m '${CI_COMMIT_MESSAGE}'
#    - git push origin HEAD:$CI_DEFAULT_BRANCH --force
#  only:
#    variables:
#      - $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
